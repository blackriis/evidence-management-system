version: '3.8'

services:
  # PostgreSQL Database with production optimizations
  postgres:
    image: postgres:15-alpine
    container_name: evidence-postgres
    environment:
      POSTGRES_USER: evidence_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-evidence_password}
      POSTGRES_DB: evidence_management
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/01-init-db.sql:ro
      - ./scripts/production-db-setup.sql:/docker-entrypoint-initdb.d/02-production-setup.sql:ro
      - ./config/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - evidence-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U evidence_user -d evidence_management"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Next.js Application with production configuration
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    container_name: evidence-app
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://evidence_user:${POSTGRES_PASSWORD:-evidence_password}@postgres:5432/evidence_management
      - NEXTAUTH_URL=${APP_URL:-http://localhost:3000}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - APP_URL=${APP_URL:-http://localhost:3000}
      - REDIS_URL=redis://redis:6379
      - STORAGE_ENDPOINT=${STORAGE_ENDPOINT:-http://minio:9000}
      - STORAGE_ACCESS_KEY=${STORAGE_ACCESS_KEY:-minioadmin}
      - STORAGE_SECRET_KEY=${STORAGE_SECRET_KEY:-minioadmin}
      - STORAGE_BUCKET=${STORAGE_BUCKET:-evidence-files}
      - RESEND_API_KEY=${RESEND_API_KEY}
      - FROM_EMAIL=${FROM_EMAIL}
      - ENABLE_PERFORMANCE_MONITORING=true
      - ENABLE_AUDIT_LOGGING=true
      - LOG_LEVEL=info
    volumes:
      - uploads_data:/app/uploads
      - app_logs:/app/logs
    ports:
      - "${APP_PORT:-3000}:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - evidence-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Redis for caching with persistence
  redis:
    image: redis:7-alpine
    container_name: evidence-redis
    command: >
      redis-server 
      --appendonly yes 
      --appendfsync everysec
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - evidence-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'

  # MinIO for file storage
  minio:
    image: minio/minio:latest
    container_name: evidence-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${STORAGE_ACCESS_KEY:-minioadmin}
      MINIO_ROOT_PASSWORD: ${STORAGE_SECRET_KEY:-minioadmin}
      MINIO_BROWSER_REDIRECT_URL: ${MINIO_CONSOLE_URL:-http://localhost:9001}
    volumes:
      - minio_data:/data
    ports:
      - "${MINIO_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    networks:
      - evidence-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Nginx reverse proxy with SSL termination
  nginx:
    image: nginx:alpine
    container_name: evidence-nginx
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    depends_on:
      - app
    networks:
      - evidence-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backup service for automated backups
  backup:
    image: postgres:15-alpine
    container_name: evidence-backup
    environment:
      PGPASSWORD: ${POSTGRES_PASSWORD:-evidence_password}
    volumes:
      - backup_data:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    command: >
      sh -c "
        apk add --no-cache dcron &&
        echo '0 2 * * * /backup.sh' | crontab - &&
        crond -f
      "
    depends_on:
      - postgres
    networks:
      - evidence-network
    restart: unless-stopped

  # Log aggregation (optional)
  loki:
    image: grafana/loki:latest
    container_name: evidence-loki
    ports:
      - "3100:3100"
    volumes:
      - loki_data:/loki
      - ./config/loki.yml:/etc/loki/local-config.yaml:ro
    networks:
      - evidence-network
    restart: unless-stopped

  # Metrics collection (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: evidence-prometheus
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - evidence-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  uploads_data:
    driver: local
  backup_data:
    driver: local
  app_logs:
    driver: local
  nginx_logs:
    driver: local
  loki_data:
    driver: local
  prometheus_data:
    driver: local

networks:
  evidence-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16