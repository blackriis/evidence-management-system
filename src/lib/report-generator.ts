import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';
import { UserRole } from "@/lib/user-role";

interface ReportData {
  title: string;
  subtitle?: string;
  generatedBy: string;
  generatedAt: Date;
  academicYear?: string;
  timeRange: string;
  summary: {
    totalEvidence: number;
    totalEvaluations: number;
    completionRate: number;
    activeUsers: number;
  };
  evidence: any[];
  evaluations: any[];
  users?: any[];
  risks?: any[];
}

interface ReportOptions {
  format: 'pdf' | 'detailed-pdf';
  includeCharts: boolean;
  includeDetails: boolean;
  userRole: UserRole;
  template: 'executive' | 'detailed' | 'teacher' | 'evaluator';
}

export class ReportGenerator {
  private doc: jsPDF;
  private pageHeight: number;
  private pageWidth: number;
  private margin: number;
  private currentY: number;

  constructor() {
    this.doc = new jsPDF();
    this.pageHeight = this.doc.internal.pageSize.height;
    this.pageWidth = this.doc.internal.pageSize.width;
    this.margin = 20;
    this.currentY = this.margin;
  }

  generateReport(data: ReportData, options: ReportOptions): Buffer {
    this.setupDocument(data, options);
    this.addHeader(data);
    this.addSummary(data);
    
    if (options.includeDetails) {
      this.addEvidenceSection(data);
      this.addEvaluationSection(data);
      
      if (options.userRole === UserRole.ADMIN || options.userRole === UserRole.EXECUTIVE) {
        this.addUserSection(data);
      }
      
      if (data.risks && data.risks.length > 0) {
        this.addRiskSection(data);
      }
    }
    
    this.addFooter(data);
    
    return Buffer.from(this.doc.output('arraybuffer'));
  }

  private setupDocument(data: ReportData, options: ReportOptions) {
    this.doc.setProperties({
      title: data.title,
      subject: 'Evidence Management System Report',
      author: data.generatedBy,
      creator: 'Evidence Management System'
    });
  }

  private addHeader(data: ReportData) {
    // Logo/Header area
    this.doc.setFontSize(20);
    this.doc.setFont('helvetica', 'bold');
    this.doc.text('Evidence Management System', this.margin, this.currentY);
    this.currentY += 10;
    
    this.doc.setFontSize(16);
    this.doc.setFont('helvetica', 'normal');
    this.doc.text(data.title, this.margin, this.currentY);
    this.currentY += 8;
    
    if (data.subtitle) {
      this.doc.setFontSize(12);
      this.doc.setTextColor(100, 100, 100);
      this.doc.text(data.subtitle, this.margin, this.currentY);
      this.currentY += 6;
    }
    
    // Report metadata
    this.doc.setFontSize(10);
    this.doc.setTextColor(80, 80, 80);
    this.doc.text(`Generated by: ${data.generatedBy}`, this.margin, this.currentY);
    this.currentY += 5;
    this.doc.text(`Generated on: ${data.generatedAt.toLocaleString()}`, this.margin, this.currentY);
    this.currentY += 5;
    
    if (data.academicYear) {
      this.doc.text(`Academic Year: ${data.academicYear}`, this.margin, this.currentY);
      this.currentY += 5;
    }
    
    this.doc.text(`Time Range: ${data.timeRange}`, this.margin, this.currentY);
    this.currentY += 15;
    
    // Separator line
    this.doc.setLineWidth(0.5);
    this.doc.setDrawColor(200, 200, 200);
    this.doc.line(this.margin, this.currentY, this.pageWidth - this.margin, this.currentY);
    this.currentY += 10;
  }

  private addSummary(data: ReportData) {
    this.checkPageBreak(60);
    
    this.doc.setFontSize(14);
    this.doc.setFont('helvetica', 'bold');
    this.doc.setTextColor(0, 0, 0);
    this.doc.text('Executive Summary', this.margin, this.currentY);
    this.currentY += 10;
    
    const summaryData = [
      ['Metric', 'Value'],
      ['Total Evidence Files', data.summary.totalEvidence.toLocaleString()],
      ['Total Evaluations', data.summary.totalEvaluations.toLocaleString()],
      ['Completion Rate', `${data.summary.completionRate}%`],
      ['Active Users', data.summary.activeUsers.toLocaleString()],
      ['Evidence per User', data.summary.activeUsers > 0 ? 
        Math.round(data.summary.totalEvidence / data.summary.activeUsers).toString() : '0'],
      ['Evaluations per Evidence', data.summary.totalEvidence > 0 ? 
        (data.summary.totalEvaluations / data.summary.totalEvidence).toFixed(1) : '0']
    ];

    autoTable(this.doc, {
      head: [summaryData[0]],
      body: summaryData.slice(1),
      startY: this.currentY,
      theme: 'grid',
      styles: {
        fontSize: 10,
        cellPadding: 3
      },
      headStyles: {
        fillColor: [70, 130, 180],
        textColor: [255, 255, 255],
        fontStyle: 'bold'
      },
      columnStyles: {
        0: { fontStyle: 'bold' },
        1: { halign: 'right' }
      }
    });

    this.currentY = (this.doc as any).lastAutoTable.finalY + 15;
  }

  private addEvidenceSection(data: ReportData) {
    this.checkPageBreak(80);
    
    this.doc.setFontSize(14);
    this.doc.setFont('helvetica', 'bold');
    this.doc.text('Evidence Overview', this.margin, this.currentY);
    this.currentY += 10;
    
    if (data.evidence.length === 0) {
      this.doc.setFontSize(10);
      this.doc.setFont('helvetica', 'normal');
      this.doc.text('No evidence files found for the selected criteria.', this.margin, this.currentY);
      this.currentY += 15;
      return;
    }

    const evidenceData = data.evidence.slice(0, 20).map(e => [
      e.originalName.length > 30 ? e.originalName.substring(0, 30) + '...' : e.originalName,
      e.uploader.name,
      e.uploader.role.replace('_', ' '),
      new Date(e.uploadedAt).toLocaleDateString(),
      e.evaluations.length.toString(),
      e.evaluations.length > 0 ? 'Evaluated' : 'Pending'
    ]);

    autoTable(this.doc, {
      head: [['File Name', 'Uploader', 'Role', 'Upload Date', 'Evaluations', 'Status']],
      body: evidenceData,
      startY: this.currentY,
      theme: 'striped',
      styles: {
        fontSize: 8,
        cellPadding: 2
      },
      headStyles: {
        fillColor: [70, 130, 180],
        textColor: [255, 255, 255],
        fontStyle: 'bold'
      },
      columnStyles: {
        0: { cellWidth: 50 },
        1: { cellWidth: 35 },
        2: { cellWidth: 25 },
        3: { cellWidth: 25 },
        4: { cellWidth: 15, halign: 'center' },
        5: { cellWidth: 20, halign: 'center' }
      }
    });

    this.currentY = (this.doc as any).lastAutoTable.finalY + 15;
    
    if (data.evidence.length > 20) {
      this.doc.setFontSize(9);
      this.doc.setTextColor(100, 100, 100);
      this.doc.text(`Note: Showing first 20 of ${data.evidence.length} evidence files.`, this.margin, this.currentY);
      this.currentY += 10;
    }
  }

  private addEvaluationSection(data: ReportData) {
    this.checkPageBreak(80);
    
    this.doc.setFontSize(14);
    this.doc.setFont('helvetica', 'bold');
    this.doc.setTextColor(0, 0, 0);
    this.doc.text('Evaluation Summary', this.margin, this.currentY);
    this.currentY += 10;
    
    if (data.evaluations.length === 0) {
      this.doc.setFontSize(10);
      this.doc.setFont('helvetica', 'normal');
      this.doc.text('No evaluations found for the selected criteria.', this.margin, this.currentY);
      this.currentY += 15;
      return;
    }

    const evaluationData = data.evaluations.slice(0, 15).map(e => [
      e.evidence.originalName.length > 25 ? e.evidence.originalName.substring(0, 25) + '...' : e.evidence.originalName,
      e.evaluator.name,
      e.evaluator.role.replace('_', ' '),
      e.qualitativeScore ? `${e.qualitativeScore}/5` : 'N/A',
      e.quantitativeScore ? `${e.quantitativeScore}%` : 'N/A',
      new Date(e.evaluatedAt).toLocaleDateString()
    ]);

    autoTable(this.doc, {
      head: [['Evidence', 'Evaluator', 'Role', 'Qualitative', 'Quantitative', 'Date']],
      body: evaluationData,
      startY: this.currentY,
      theme: 'striped',
      styles: {
        fontSize: 8,
        cellPadding: 2
      },
      headStyles: {
        fillColor: [34, 139, 34],
        textColor: [255, 255, 255],
        fontStyle: 'bold'
      },
      columnStyles: {
        0: { cellWidth: 50 },
        1: { cellWidth: 35 },
        2: { cellWidth: 25 },
        3: { cellWidth: 20, halign: 'center' },
        4: { cellWidth: 20, halign: 'center' },
        5: { cellWidth: 20 }
      }
    });

    this.currentY = (this.doc as any).lastAutoTable.finalY + 15;
    
    if (data.evaluations.length > 15) {
      this.doc.setFontSize(9);
      this.doc.setTextColor(100, 100, 100);
      this.doc.text(`Note: Showing first 15 of ${data.evaluations.length} evaluations.`, this.margin, this.currentY);
      this.currentY += 10;
    }
  }

  private addUserSection(data: ReportData) {
    if (!data.users || data.users.length === 0) return;
    
    this.checkPageBreak(80);
    
    this.doc.setFontSize(14);
    this.doc.setFont('helvetica', 'bold');
    this.doc.setTextColor(0, 0, 0);
    this.doc.text('User Activity', this.margin, this.currentY);
    this.currentY += 10;

    const userData = data.users.slice(0, 20).map(u => [
      u.name,
      u.email.length > 30 ? u.email.substring(0, 30) + '...' : u.email,
      u.role.replace('_', ' '),
      u._count.evidence.toString(),
      u._count.evaluations.toString()
    ]);

    autoTable(this.doc, {
      head: [['Name', 'Email', 'Role', 'Evidence', 'Evaluations']],
      body: userData,
      startY: this.currentY,
      theme: 'striped',
      styles: {
        fontSize: 8,
        cellPadding: 2
      },
      headStyles: {
        fillColor: [138, 43, 226],
        textColor: [255, 255, 255],
        fontStyle: 'bold'
      },
      columnStyles: {
        0: { cellWidth: 40 },
        1: { cellWidth: 50 },
        2: { cellWidth: 30 },
        3: { cellWidth: 20, halign: 'center' },
        4: { cellWidth: 20, halign: 'center' }
      }
    });

    this.currentY = (this.doc as any).lastAutoTable.finalY + 15;
  }

  private addRiskSection(data: ReportData) {
    if (!data.risks || data.risks.length === 0) return;
    
    this.checkPageBreak(80);
    
    this.doc.setFontSize(14);
    this.doc.setFont('helvetica', 'bold');
    this.doc.setTextColor(0, 0, 0);
    this.doc.text('Risk Assessment', this.margin, this.currentY);
    this.currentY += 10;

    const riskData = data.risks.slice(0, 10).map(r => [
      r.title.length > 40 ? r.title.substring(0, 40) + '...' : r.title,
      r.severity.toUpperCase(),
      r.type.replace('_', ' '),
      r.affectedCount.toString(),
      r.description.length > 50 ? r.description.substring(0, 50) + '...' : r.description
    ]);

    autoTable(this.doc, {
      head: [['Risk', 'Severity', 'Type', 'Affected', 'Description']],
      body: riskData,
      startY: this.currentY,
      theme: 'striped',
      styles: {
        fontSize: 8,
        cellPadding: 2
      },
      headStyles: {
        fillColor: [220, 20, 60],
        textColor: [255, 255, 255],
        fontStyle: 'bold'
      },
      columnStyles: {
        0: { cellWidth: 50 },
        1: { cellWidth: 20, halign: 'center' },
        2: { cellWidth: 25 },
        3: { cellWidth: 15, halign: 'center' },
        4: { cellWidth: 60 }
      }
    });

    this.currentY = (this.doc as any).lastAutoTable.finalY + 15;
  }

  private addFooter(data: ReportData) {
    const pageCount = this.doc.getNumberOfPages();
    
    for (let i = 1; i <= pageCount; i++) {
      this.doc.setPage(i);
      this.doc.setFontSize(8);
      this.doc.setTextColor(100, 100, 100);
      
      // Footer text
      this.doc.text('Evidence Management System - Confidential', this.margin, this.pageHeight - 10);
      
      // Page number
      this.doc.text(
        `Page ${i} of ${pageCount}`,
        this.pageWidth - this.margin - 20,
        this.pageHeight - 10
      );
    }
  }

  private checkPageBreak(requiredSpace: number) {
    if (this.currentY + requiredSpace > this.pageHeight - 30) {
      this.doc.addPage();
      this.currentY = this.margin;
    }
  }
}

// Export functions for different report types
export function generateExecutiveReport(data: ReportData): Buffer {
  const generator = new ReportGenerator();
  return generator.generateReport(data, {
    format: 'pdf',
    includeCharts: false,
    includeDetails: false,
    userRole: UserRole.EXECUTIVE,
    template: 'executive'
  });
}

export function generateDetailedReport(data: ReportData, userRole: UserRole): Buffer {
  const generator = new ReportGenerator();
  return generator.generateReport(data, {
    format: 'detailed-pdf',
    includeCharts: true,
    includeDetails: true,
    userRole,
    template: 'detailed'
  });
}

export function generateTeacherReport(data: ReportData): Buffer {
  const generator = new ReportGenerator();
  return generator.generateReport(data, {
    format: 'pdf',
    includeCharts: false,
    includeDetails: true,
    userRole: UserRole.TEACHER,
    template: 'teacher'
  });
}

export function generateEvaluatorReport(data: ReportData, userRole: UserRole): Buffer {
  const generator = new ReportGenerator();
  return generator.generateReport(data, {
    format: 'pdf',
    includeCharts: false,
    includeDetails: true,
    userRole,
    template: 'evaluator'
  });
}