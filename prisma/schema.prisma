// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  role      UserRole
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  // Notification preferences
  emailNotifications    Boolean @default(true)
  lineNotifications     Boolean @default(false)
  deadlineReminderDays  Int     @default(7) // Days before deadline to send reminder

  // Relations
  uploadedEvidence Evidence[] @relation("EvidenceUploader")
  evaluations      Evaluation[]
  ownedSubIndicators SubIndicator[] @relation("SubIndicatorOwner")
  notifications    Notification[]
  auditLogs        AuditLog[]

  @@map("users")
}

model AcademicYear {
  id                    String   @id @default(cuid())
  name                  String   @unique
  startDate             DateTime
  endDate               DateTime
  uploadWindowOpen      Boolean  @default(false)
  evaluationWindowOpen  Boolean  @default(false)
  isActive              Boolean  @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  evidence Evidence[]

  @@map("academic_years")
}

model EducationLevel {
  id        String   @id @default(cuid())
  name      String
  code      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  standards Standard[]

  @@map("education_levels")
}

model Standard {
  id               String   @id @default(cuid())
  name             String
  code             String
  educationLevelId String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  educationLevel EducationLevel @relation(fields: [educationLevelId], references: [id], onDelete: Cascade)
  indicators     Indicator[]

  @@unique([code, educationLevelId])
  @@map("standards")
}

model Indicator {
  id         String   @id @default(cuid())
  name       String
  code       String
  standardId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  standard      Standard       @relation(fields: [standardId], references: [id], onDelete: Cascade)
  subIndicators SubIndicator[]

  @@unique([code, standardId])
  @@map("indicators")
}

model SubIndicator {
  id          String   @id @default(cuid())
  name        String
  code        String
  indicatorId String
  ownerId     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  indicator Indicator @relation(fields: [indicatorId], references: [id], onDelete: Cascade)
  owner     User?     @relation("SubIndicatorOwner", fields: [ownerId], references: [id])
  evidence  Evidence[]

  @@unique([code, indicatorId])
  @@map("sub_indicators")
}

model Evidence {
  id              String   @id @default(cuid())
  filename        String
  originalName    String
  fileSize        Int
  mimeType        String
  uploaderId      String
  academicYearId  String
  subIndicatorId  String
  version         Int      @default(1)
  isLatest        Boolean  @default(true)
  storageKey      String   @unique
  uploadedAt      DateTime @default(now())
  deletedAt       DateTime?

  // Relations
  uploader     User          @relation("EvidenceUploader", fields: [uploaderId], references: [id])
  academicYear AcademicYear  @relation(fields: [academicYearId], references: [id])
  subIndicator SubIndicator  @relation(fields: [subIndicatorId], references: [id])
  evaluations  Evaluation[]

  @@index([uploaderId, academicYearId])
  @@index([subIndicatorId, isLatest])
  @@map("evidence")
}

model Evaluation {
  id                 String   @id @default(cuid())
  evidenceId         String
  evaluatorId        String
  qualitativeScore   Int?     // 1-5 scale
  quantitativeScore  Int?     // 0-100 percentage
  comments           String?
  evaluatedAt        DateTime @default(now())

  // Relations
  evidence  Evidence @relation(fields: [evidenceId], references: [id], onDelete: Cascade)
  evaluator User     @relation(fields: [evaluatorId], references: [id])

  @@unique([evidenceId, evaluatorId])
  @@map("evaluations")
}

model Notification {
  id          String           @id @default(cuid())
  userId      String
  type        NotificationType
  title       String
  message     String
  isRead      Boolean          @default(false)
  sentAt      DateTime?        // When notification was actually sent
  scheduledFor DateTime?       // For scheduled notifications
  metadata    Json?            // Additional context data
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isRead])
  @@index([scheduledFor])
  @@map("notifications")
}

model AuditLog {
  id          String      @id @default(cuid())
  userId      String?     // Nullable for system actions
  action      AuditAction
  resource    String      // Table/resource name (e.g., "evidence", "user", "evaluation")
  resourceId  String?     // ID of the affected resource
  oldValues   Json?       // Previous values for updates
  newValues   Json?       // New values for creates/updates
  metadata    Json?       // Additional context (IP address, user agent, etc.)
  timestamp   DateTime    @default(now())

  // Relations
  user User? @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([action])
  @@index([resource])
  @@index([timestamp])
  @@map("audit_logs")
}

enum UserRole {
  TEACHER
  IQA_EVALUATOR
  EQA_EVALUATOR
  EXECUTIVE
  ADMIN
}

enum NotificationType {
  UPLOAD_DEADLINE_REMINDER
  EVALUATION_DEADLINE_REMINDER
  UPLOAD_WINDOW_OPENING
  UPLOAD_WINDOW_CLOSING
  EVALUATION_WINDOW_OPENING
  EVALUATION_WINDOW_CLOSING
  EVALUATION_OVERDUE
  ASSIGNMENT_NOTIFICATION
  SYSTEM_ALERT
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  UPLOAD
  DOWNLOAD
  EVALUATE
  ASSIGN
  RESTORE
  EXPORT
  IMPORT
  SYSTEM_CONFIG
  SECURITY_VIOLATION
  RATE_LIMIT_EXCEEDED
  CSRF_VIOLATION
  MALWARE_DETECTED
  UNAUTHORIZED_ACCESS
}
